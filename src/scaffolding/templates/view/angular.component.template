import { Component, OnInit } from '@angular/core';
import { #{class_name} } from './#{class_name_lower}.model';
import { #{class_name}Service } from './#{class_name_lower}.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
#{for} #{foreign_keys}
import { #{foreign_keys:columnTypePascal} } from './#{foreign_keys:columnTypeProcessed}.model'
import { #{foreign_keys:columnTypePascal}Service } from './#{foreign_keys:columnTypeProcessed}.service'
#{endfor}

@Component({
  selector: 'app-#{class_name_lower}',
  templateUrl: './#{class_name_lower}.component.html',
  styleUrls: ['./#{class_name_lower}.component.css'],
  imports: [
      FormsModule,
      CommonModule
    ],
    standalone: true
})
export class #{class_name_camel}Component implements OnInit {

  #{class_name_lower}s: #{class_name_camel}[] = [];
  new#{class_name_camel}: #{class_name_camel} = new #{class_name_camel}();
  edited#{class_name_camel}: #{class_name_camel} = new #{class_name_camel}();
  isCreateModalOpen = false;
  isEditModalOpen = false;

  #{for} #{foreign_keys}
  #{foreign_keys:columnTypeProcessed}s : #{foreign_keys:columnTypePascal}[] = []
  #{endfor}

    // Pagination
    totalOfPages : number = 0
    totalOfElements : number = 0
    currentPage : number = 0

    isFirstPage  = false
    isLastPage = false

  constructor(
    #{for} #{foreign_keys}
    private #{foreign_keys:columnTypeProcessed}Service : #{foreign_keys:columnTypePascal}Service,
    #{endfor}
    private #{class_name_lower}Service: #{class_name_camel}Service
  ) { }

  ngOnInit(): void {
    this.get#{class_name_camel}s();
    #{for} #{foreign_keys}
    this.get#{foreign_keys:columnTypePascal}s();
    #{endfor}
  }

  // Pagination
    generateRange(): number[] {
      return Array(this.totalOfPages).fill(0).map((x, i) => i);
    }

    switchPage(page : number) {
      this.#{class_name_lower}Service.get#{class_name_camel}sPages(page).subscribe({
        next: (data) => {
          this.#{class_name_lower}s = data.content

          // Pagination
          this.totalOfPages = data.totalPages
          this.totalOfElements = data.totalElements
          this.currentPage = data.number

          this.isFirstPage = data.first
          this.isLastPage = data.last
        }
      })
    }

    previousPage() {
      let previousPageNumber = this.currentPage;
      if (previousPageNumber < 1) previousPageNumber = 1;

      this.switchPage(previousPageNumber);
    }

    nextPage() {
      let nextPageNumber = this.currentPage + 2;
      if (nextPageNumber > this.totalOfPages) nextPageNumber = this.totalOfPages;

      this.switchPage(nextPageNumber);
    }
    // End pagination

  get#{class_name_camel}s(): void {
    this.switchPage(1)
  }

  #{for} #{foreign_keys}
    get#{foreign_keys:columnTypePascal}s(): void {
        this.#{foreign_keys:columnTypeProcessed}Service.get#{foreign_keys:columnTypePascal}s().subscribe({
            next: (data) => {
                this.#{foreign_keys:columnTypeProcessed}s = data
            }
        });
    }
  #{endfor}

  onCreate(): void {
    this.isCreateModalOpen = true;
  }

  onSubmitCreate(): void {
    this.#{class_name_lower}Service.create#{class_name_camel}(this.new#{class_name_camel}).subscribe(() => {
      this.get#{class_name_camel}s();
      this.onCloseCreateModal();
    });
  }

  onCloseCreateModal(): void {
    this.isCreateModalOpen = false;
    this.new#{class_name_camel} = new #{class_name_camel}();
  }

  onEdit(#{class_name_lower}: #{class_name_camel}): void {
    this.edited#{class_name_camel} = #{class_name_lower};
    this.isEditModalOpen = true;
  }

  onSubmitEdit(): void {
    this.#{class_name_lower}Service.update#{class_name_camel}(this.edited#{class_name_camel}.#{primary_key:columnName}, this.edited#{class_name_camel}).subscribe(() => {
      this.get#{class_name_camel}s();
      this.onCloseEditModal();
    });
  }

  onCloseEditModal(): void {
    this.isEditModalOpen = false;
    this.edited#{class_name_camel} = new #{class_name_camel}();
  }

  onDelete(#{class_name_lower}: #{class_name_camel}): void {
    if (confirm("Êtes-vous sûr de vouloir supprimer #{class_name_lower} ?")) {
      this.#{class_name_lower}Service.delete#{class_name_camel}(#{class_name_lower}.#{primary_key:columnName}).subscribe(() => {
        this.get#{class_name_camel}s();
      });
    }
  }
}
  
