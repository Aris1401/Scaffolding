import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, forkJoin } from 'rxjs';
import { tap, switchMap } from 'rxjs/operators';
import { #{class_name_camel} } from './#{class_name_lower}.model';
#{for} #{foreign_keys}
import { #{foreign_keys:columnTypePascal} } from './#{foreign_keys:columnTypeProcessed}.model'
import { #{foreign_keys:columnTypePascal}Service } from './#{foreign_keys:columnTypeProcessed}.service'
#{endfor}

const baseUrl = 'http://localhost:8080/api/v1/#{class_name_lower}s'; // Remplacer par votre URL d'API

@Injectable({
  providedIn: 'root'
})
export class #{class_name_camel}Service {

  constructor(
    #{for} #{foreign_keys}
    private #{foreign_keys:columnTypeProcessed}Service : #{foreign_keys:columnTypePascal}Service,
    #{endfor}
    private http: HttpClient
  ) { }

  get#{class_name_camel}ById(id : string): Observable<#{class_name_camel}> {
    return this.http.get<#{class_name_camel}>(`${baseUrl}/${id}`)
  }

  get#{class_name_camel}s(): Observable<any> {
    return this.http.get<any>(baseUrl);
  }

  get#{class_name_camel}sPages(page : number) : Observable<any> {
        return this.http.get<any>(`${baseUrl}/p/${page}`)
  }

  create#{class_name_camel}(#{class_name_lower}: #{class_name_camel}): Observable<#{class_name_camel}> {
      const {#{primary_key:columnName}, ...#{class_name_lower}WithoutId} = #{class_name_lower};

      #{for} #{foreign_keys}
      const #{foreign_keys:columnName}$ = this.#{foreign_keys:columnTypeProcessed}Service.get#{foreign_keys:columnTypePascal}ById(#{class_name_lower}WithoutId.#{foreign_keys:columnName});
      #{endfor}

      // Combine all observables into a single observable using forkJoin
      return forkJoin([
          #{for} #{foreign_keys}
          #{foreign_keys:columnName}$.pipe(
              tap((data) => {
                  #{class_name_lower}WithoutId.#{foreign_keys:columnTypeProcessed} = data;
              }),
          ),
          #{endfor}
      ]).pipe(
          // Switch to the HTTP POST request once all data is fetched and updated
          switchMap(() => {
              console.log(#{class_name_lower}WithoutId);
              return this.http.post<#{class_name_camel}>(baseUrl, #{class_name_lower}WithoutId);
          })
      );
  }

  update#{class_name_camel}(id: string, #{class_name_lower}: #{class_name_camel}): Observable<#{class_name_camel}> {
    #{for} #{foreign_keys}
      const #{foreign_keys:columnName}$ = this.#{foreign_keys:columnTypeProcessed}Service.get#{foreign_keys:columnTypePascal}ById(#{class_name_lower}.#{foreign_keys:columnName});
      #{endfor}

      // Combine all observables into a single observable using forkJoin
      return forkJoin([
          #{for} #{foreign_keys}
          #{foreign_keys:columnName}$.pipe(
              tap((data) => {
                  #{class_name_lower}.#{foreign_keys:columnTypeProcessed} = data;
              }),
          ),
          #{endfor}
      ]).pipe(
          // Switch to the HTTP POST request once all data is fetched and updated
          switchMap(() => {
              console.log(#{class_name_lower});
              return this.http.post<#{class_name_camel}>(baseUrl, #{class_name_lower});
          })
      );

    return this.http.put<#{class_name_camel}>(`${baseUrl}/${id}`, #{class_name_lower});
  }

   delete#{class_name_camel}(id : string): Observable<void> {
    return this.http.delete<void>(`${baseUrl}/${id}`);
  }
}
