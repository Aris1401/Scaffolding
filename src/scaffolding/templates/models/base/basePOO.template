#{if} language:java
package #{namespace};
#{endif}

#{for} #{imports}
#{if} language:java
import #{imports};
#{endif}

#{if} language:dotnet
using #{imports};
#{endif}
#{endfor}

#{if} framework:base
import java.sql.Connection;
import scaffolding.bdd.generic.GenericDAO;
import scaffolding.database.ScaffoldDatabaseInfomations;
import java.util.ArrayList;
#{endif}

#{if} language:dotnet
namespace #{namespace};
#{endif}

#{if} framework:springboot
@Entity
#{endif}
public class #{class_name} {
    #{for} #{fields}
    #{if} language:java
    #{field:languageType} #{fields:columnName};
    #{endif}

    #{if} language:dotnet
    public #{fields:languageType} #{fields:columnNamePascal} {set; get;}
    #{endif}
    #{endfor}

    #{if} framework:springboot
    #{for} #{foreign_keys}
    @ManyToOne
    @JoinColumn("#{foreign_keys:rawColumnName}")
    #{foreign_keys:columnTypePascal} #{foreign_keys:columnTypeProcessed};
    #{endfor}
    #{endif}

    #{if} language:java
    #{for} #{fields}
    public void set#{fields:columnNamePascal}(#{fields:languageType} #{fields:columnName}) {
        this.#{fields:columnName} = #{fields:columnName};
    }

    public #{fields:languageType} get#{fields:columnNamePascal}() {
        return this.#{fields:columnName};
    }
    #{endfor}
    #{endif}

    #{if} framework:base
    public void save#{class_name}() {
        Connection c = ScaffoldDatabaseInfomations.getInstance().loadConnection();
        try {
            new GenericDAO<#{class_name}>(#{class_name}.class).saveInDatabse(c);
            c.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public ArrayList<#{class_name}> getAll#{class_name}() {
        Connection c = ScaffoldDatabaseInfomations.getInstance().loadConnection();

        try {
            ArrayList<#{class_name}> all#{class_name} = new GenericDAO<#{class_name}>(#{class_name}.class).getFromDatabase(c);
            c.close();

            return all#{class_name};
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public #{class_name} get#{class_name}ById(#{primary_key:languageType} #{primary_key:columnName}) {
        Connection c = ScaffoldDatabaseInfomations.getInstance().loadConnection();

        try {
            ArrayList<#{class_name}> all#{class_name} = new GenericDAO<#{class_name}>(#{class_name}.class)
                                                        .addToSelection("#{primary_key:columnName}", "#{primary_key:columnName}", "")
                                                        .getFromDatabase(c);

            c.close();

            return all#{class_name}.isEmpty() ? null : all#{class_name}.get(0);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public #{class_name} update#{class_name}() {
        Connection c = ScaffoldDatabaseInfomations.getInstance().loadConnection();

        try {
            new GenericDAO<#{class_name}>(#{class_name}.class)
            .addToSelection("#{primary_key:columnName}", "#{primary_key:columnName}", "")
            #{for} #{fields}
            .addToSetUpdate("#{fields:columnName}", get#{fields:columnNamePascal}())
            #{endfor}
            .updateInDatabase(c);

            c.close();

            return this;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public void delete#{class_name}() {
            Connection c = ScaffoldDatabaseInfomations.getInstance().loadConnection();

            try {
                new GenericDAO<#{class_name}>(#{class_name}.class)
                .addToSelection("#{primary_key:columnName}", "#{primary_key:columnName}", "")
                .deleteFromDatabase(c);

                c.close();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    #{endif}
}